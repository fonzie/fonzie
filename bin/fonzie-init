#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , component = require('..')
  , utils = require('../lib/utils')
  , path = require('path')
  , fs = require('fs')
  , join = path.join
  , read = fs.readFileSync
  , readdir = fs.readdirSync
  , exists = fs.existsSync
  , mkdir = require('mkdirp').sync;

// usage

program
  .usage('[dir]')
  .option('-p, --private', 'create a private component')

// options

program
  .parse(process.argv);

// dest

var dir = program.args[0] || '.';

// --local

var local = program.local;

// already a component

if (exists(join(dir, 'component.json'))) {
  utils.fatal(dir + ' is already a package');
}

/**
 * Verbose write.
 */

function write(path, str) {
  if (exists(path)) {
    utils.warn('exists', path);
  } else {
    utils.log('create', path);
    fs.writeFileSync(path, str);
  }
}

/**
 * This will become our component.json
 */

var conf = {
  name: "",
  repo: "",
  version: "0.0.1",
  author: "",
  description: "",
  main: "",
  remotes: [ "http://fonzie.herokuapp.com/packages" ],
  files: [],
  license: ""
};

/**
 * private / public prompts
 */

console.log();

if( program.private ) {
  createPrivateComponent();
}
else {
  createPublicComponent();
}

/**
 * Create a private component with no other
 * files other than the component.json
 */

function createPrivateComponent() {
  conf.private = true;
  createDirectory();
  saveConfig();
  process.exit();
}

/**
 * Create a public component that includes
 * all of the files need to publish a component
 */

function createPublicComponent() {
  var prompt = {
    name: '   name: ',
    repo: '   repo (username/project): ',
    desc: '   description: ',
    author: '   author: '
  };
  program.prompt(prompt, function(obj){
    console.log();
    conf.name = obj.name;
    conf.repo = obj.repo;
    conf.author = obj.author;
    conf.description = obj.desc;
    conf.license = "MIT";
    createDirectory();
    createSkeleton();
    saveConfig();    
    process.exit();
  });
}

/**
 * Write the component.json
 */

function saveConfig() {
  validateConfig();
  write(join(dir, 'component.json'), JSON.stringify(conf, null, 2));
  console.log();
}

/**
 * Make sure the component.json is valid
 */

function validateConfig() {
  if(conf.private) return;
  if(conf.name.match(/^[a-zA-Z0-9\-_]+$/).length !== 1) {
    utils.error('Package name can only contain letters, numbers, underscores and dashes');
    process.exit(0);
  }
  if(conf.repo.indexOf('/') === -1) {
    utils.error('Github repo must be in the format username/project');
    process.exit(0);
  }
}

/**
 * Create the component directory
 * if it doesn't exist
 */

function createDirectory() {
  console.log();
  utils.log('create', dir);
  mkdir(dir);
}

/**
 * Create the template files
 */

function createSkeleton() {
  conf.main = conf.name + '.scss';
  conf.files = [ conf.name + '.scss' ];
  write(join(dir, conf.name + '.scss'), '');
  write(join(dir, '.gitignore'), 'components\nbuild\n.sass-cache\n');
  write(join(dir, 'README.md'), '');
}

/**
 * Boolean from `str`.
 */

function bool(str) {
  return /^y(es)?/i.test(str);
}