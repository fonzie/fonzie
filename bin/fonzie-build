#!/usr/bin/env node

var program = require('commander');
var fonzie = require('..');
var Builder = require('../lib/builder');
var utils = require('../lib/utils');
var log = utils.log;
var path = require('path');
var fs = require('fs');
var exists = fs.existsSync || path.existsSync;
var mkdir = require('mkdirp');
var debug = require('debug')('fonzie:build');
var exec = require('child_process').exec;

// Options 

program
  .option('-o, --out <dir>', 'output directory defaulting to ./build', 'build')
  .option('-s, --style <type>', 'Output style. Can be nested (default), compact, compressed, or expanded.')
  .option('-l, --line-numbers', 'Emit comments in the generated CSS indicating the corresponding source line.')
  .option('-v, --verbose', 'output verbose build information')

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build to ./build');
  console.log('    $ fonzie build');
  console.log();
  console.log('    # build to ./dist as screen.css');
  console.log('    $ fonzie build -o dist/screen.css');
  console.log();
});

// parse argv

program.parse(process.argv);

// Load json

var conf = require(path.resolve('component.json'));

// Add component lookup paths
var lookupPaths = ['components'];
if(conf.paths) {
  lookupPaths = lookupPaths.concat(conf.paths);
}

debug('Look up paths: %s', lookupPaths);

// mkdir -p
mkdir.sync(program.out);
console.log();

// Build it
var builder = new Builder({
  paths: lookupPaths
});

// When we've built up all the arguments
builder.on('end', function(args){  
  var target = program.args[0] || conf.main || 'index.scss';
  var output = program.args[1] || 'build/build.css';

  if( program.style ) {
    args.push(['--style', program.style]);
  }

  if(program['line-numbers']) {
    args.push(['--line-numbers']);
  }

  args.unshift(['sass']);
  args.push([target]);
  args.push([output]);

  var command = args.map(function(arg){
    return arg.join(' ');
  }).join(' ');
  
  debug(command);

  // sass --require eachfile --load-path blah --style nested --force --line-numbers [input] [output]
  var child = exec(command, function(err, out) {
    if (err) utils.error(err);
    log('Output', output);
    process.exit();
  });

});

builder.build();
