#!/usr/bin/env node

var program = require('commander');
var Builder = require('../lib/builder');
var fs = require('fs-extra');

program
  .option('-o, --out <dir>', 'output directory defaulting to ./build', 'build')
  .option('-s, --style <type>', 'Output style. Can be nested (default), compact, compressed, or expanded.')
  .option('-l, --line-numbers', 'Emit comments in the generated CSS indicating the corresponding source line.')
  .option('-v, --verbose', 'output verbose build information')
  .option('-c, --clean', 'Remove the build directory before building')
  .option('-d, --dev', 'Build in development mode');

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build to ./build');
  console.log('    $ fonzie build');
  console.log();
  console.log('    # build to ./dist');
  console.log('    $ fonzie build -o ./dist');
  console.log();
  console.log('    # build in development mode');
  console.log('    $ fonzie build --dev');
  console.log();
  console.log('    # remove build directory and build');
  console.log('    $ fonzie build --clean');
  console.log();
});

program.parse(process.argv);

// Build it
var builder = new Builder({
  dir: process.cwd(),
  output: program.out,
  style: program.style,
  lineNumbers: program['line-numbers'],
  dev: program.dev
});

var buildProject = function() {
  builder.build()
    .on('log', function(data, packages){
      if(program.verbose) {
        console.log();
        console.log('\tFound packages:\n\t - ', packages.map(String).join('\n\t - '));
        console.log();
        console.log('\tLoad paths:\n\t - ', data.loadPaths.join('\n\t - '));
        console.log();
        console.log('\tRuby Libraries:\n\t - ', data.require.join('\n\t - '));
        console.log();
        console.log('\tInput:\n\t - ', data.input);
        console.log();
        console.log('\tOutput:\n\t - ' + data.output);
      }
    })
    .on('end', function(err){
      if(err) {
        console.error(err);
        process.exit(1);
      }
      console.log();
      console.log('Done without errors.');
      process.exit();
    });
};

// Remove the build directory in dev mode
if(program.clean) {
  fs.remove(builder.output, buildProject);
}
else {
  buildProject();
}